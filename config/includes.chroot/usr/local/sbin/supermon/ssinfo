#!/bin/sh
#
# Program: ssinfo
# Author: Paul Aidukas KN2R (Copyright) April 27, 2003
# For ham radio use only, NOT for commercial use!
#
# ssinfo outputs one line with the following information separated by colons
#
#   Hostname:Model:Domain:Location:OSver:HostID:Asset:SerNum:DRAM:Swap:GFX:\
#   Speed:CPU-Type:StorageDevs:JumpDate:LastUser:Uptime
#
# 26-Feb-2003  Paul Aidukas/KN2R  Initial Linux Release.
# 23-Feb-2017  Paul Aidukas/KN2R  Modified for RPi2-3 and SuperMon.
# 06-Jul-2017  Paul Aidukas/KN2R  Added more CPU stats by D. Crompton.
#
##############################################################################

# Default SuperMon Web directory:
SUPERMON_DIR="/var/www/html/supermon"

AddYear () {
NewDate=`echo $1|awk 'BEGIN {Months="JanFebMarAprMayJunJulAugSepOctNovDec"; cM=""}
  { D=$0; L=length($0)
    if (L==4) cM=substr(D,2)
    if (L==5) cM=substr(D,3)
  }
  END {if (cM=="") print D
       else
       {
         cN=(index(Months,cM)-1)/3
	 if (cN <0) print D
	 else
	 {
	   if (cN > M) Y--
	   print D Y
	 }
       }
  }
  ' M=$MONTH Y=$YEAR`
}

PATH=/bin:/usr/bin:/usr/sbin:/sbin

OS=`uname -s`		# Must be Linux system
if [ "$OS" != "Linux" ]; then
  exit
fi

#OSVER=`uname -r`
if [ -f /etc/os-release ]; then
   OSVER=`cat /etc/os-release |grep "^NAME=" |sed 's/^NAME=//' |sed 's/\"//g'`
else
   OSVER="UNKNOWN"
fi

HSTNAME=`uname -n`
# Use MAC for HostID
HSTID=`ifconfig -a |grep HWaddr |awk '{if ($1 !~ "virbr") print $5}'|tr -d ':'|sort|head -1`
if [ "$HSTID" = "" ]; then
  HSTID=`hostid`
fi
#DOMAIN=`domainname`
NSTYPE=""
MONTH=`date +%m`
YEAR=`date +%Y`

if [ "$DOMAIN" = "" -o "$DOMAIN" = "noname" ]; then
    DOMAIN="Standalone"
    NSTYPE="Files"
fi

if [ -f /etc/nsswitch.conf ]
then
  NSTYPE=`/bin/awk 'BEGIN{nstype="FILES"}
    {
      if ($1 ~/^passwd/) { for(i=NF;i>=2;i--) if ( $i != "files" && $i != "compat" ) nstype=$i }
    } END{printf nstype}' /etc/nsswitch.conf`
fi
if [ "$NSTYPE" != "" ]
then
  DOMAIN="$DOMAIN($NSTYPE)"
fi

if [ -r /var/Location ]; then
    LOCATION=`cat /var/Location`
else
  if [ -r ${SUPERMON_DIR}/global.inc ]; then
    LOCATION=`cat ${SUPERMON_DIR}/global.inc |grep LOCATION |cut -f2 -d"\"" |sed 's/\"//g' |sed 's/\;//'`
  else
    LOCATION=Unknown
  fi
fi

if [ -r /var/.Asset ]; then
  ASSET=`cut -f1 -d":" /var/.Asset`
  SERNUM=`cut -f2 -d":" /var/.Asset`
else
  if [ -r ${SUPERMON_DIR}/global.inc ]; then
    ASSET=`cat ${SUPERMON_DIR}/global.inc |egrep ^.TITLE2 |cut -f2 -d"\"" |sed 's/\"//g' |sed 's/\;//'`
    SERNUM=`cat ${SUPERMON_DIR}/global.inc |egrep ^.TITLE3 |cut -f2 -d"\"" |sed 's/\"//g' |sed 's/\;//'`
  else
    ASSET=NA
    SERNUM=NA
  fi
fi

if [ -x /sbin/swapon ]; then
  SWAP=`/sbin/swapon -s|awk 'BGEIN{S=0}{S=S+$3}END{printf("%d",S/1024)}'`
else
  SWAP='na'
fi

LASTLOG=`last | grep ":0" | head -500 | grep -v "root"|awk '
	BEGIN { cnt=0 }
	{if ($0!="")
	 {
	   if (cnt==0)
	   {
	     cnt++; UsrCnt[1]=1; User[1]=$1;
	     if($7~/:/) UsrDate[1]=$6 $5; else UsrDate[1]=$5 $4
	   }
	    else
	    {
	      Found=0;
	      for(i=1;i<=cnt;i++) if (User[i]==$1) {UsrCnt[i]++; Found=1}
	      if (Found==0)
	      {
		cnt++; UsrCnt[cnt]=1; User[cnt]=$1;
	  	if($7~/:/) UsrDate[cnt]=$6 $5; else UsrDate[cnt]=$5 $4
	      }
	    }
	  }
	}
	END { High=1; for(i=2;i<=cnt;i++) if (UsrCnt[i]>UsrCnt[High]) High=i;
	      print User[High]" "UsrDate[High]}'`
LASTUSR=`echo $LASTLOG|awk '{print $1}'`
LASTDAT=`echo $LASTLOG|awk '{print $2}'`
AddYear $LASTDAT
LASTLOG="$LASTUSR $NewDate"

UPTIME=`uptime|awk '{if (index($4,"day")==1) print $3 ; else print "1"}'`

if [ -f /var/sadm/system/logs/finish.log ]; then
  JUMPDATE=`ls -l /var/sadm/system/logs/finish.log|awk '{if ($8~/:/) print $7 $6; else print $7 $6 $8}'`
else
  if [ -d /lost+found ]; then
    JUMPDATE=`ls -l /|grep "lost+found" |awk '{if(NF==8){if ($7~/:/) print $6 $5; else print $6 $5 $7} else {if ($8~/:/) print $7 $6; else print $7 $6 $8}}'`
  else
    JUMPDATE="NA"
  fi
fi
AddYear $JUMPDATE
JUMPDATE=$NewDate

MODEL="PC"
DEVS="NA"
DEVS=`fdisk -l | grep ^"/dev/[hms]" | sed 's/\*/ /g' | grep "Linux" | awk '{printf("%s[%4.2f GB] ",$1,($4/1048576))}' | sed 's/\/dev\///g'`
if [ -z "$DEVS" ]; then DEVS="[only root user can retrieve storage device info]"; fi
#DEVS=`echo $DEVS`
GCARD="NA"
if [ -f /proc/meminfo ]; then
   MEMORY=`cat /proc/meminfo | grep MemTotal | awk '{printf("%d",($2/1000))}'`
else
   MEMORY= 0
fi

if [ -f /proc/cpuinfo ]; then
   SPEED2=""
   SPEED=`cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq`
   SPEED=`expr $SPEED`
   SLUG=`cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq`
   SLUG=`expr $SLUG`
   if [ $SPEED == $SLUG ]; then
      SPEED2=", TURBO-Mode enabled"
   fi
   if [ $SPEED -ge 1000000 ]; then
      SPEED=`echo $SPEED |awk '{printf"%.2f GHz",($SPEED/1000000)}'`
    else
      SPEED=`echo $SPEED |awk '{printf"%.0f MHz",($SPEED/1000)}'`
   fi
   NCPU=`grep -c "^processor" /proc/cpuinfo`
   CPUTYPE=`cat /proc/cpuinfo | grep 'model name' | cut -f2 -d':'|tr -s '[:space:]'|sed 's/^ //g'|head -1`
else
   SPEED=0
   NCPU=1
   CPUTYPE=NA
fi
if [ "$SPEED" = "1.50 GHz" ]; then
   MODEL="RPi-4B"
fi
if [ "$SPEED" = "1.40 GHz" ]; then
   MODEL="RPi-3B+Plus"
fi
if [ "$SPEED" = "1.20 GHz" ]; then
   MODEL="RPi-3"
fi
if [ "$SPEED" = "900 MHz" ]; then
   MODEL="RPi-2"
fi
if [ $NCPU -gt 1 ]; then
   SPEED=$NCPU"@"$SPEED
fi

MODEL=$MODEL$SPEED2

# Video card
   #GRAPHICS=`cat /proc/pci |grep VGA |sed 's/VGA.*\[//' |sed 's/\].*//' |awk '{print $1" "$2" "$3}'`
   #GCARD=`cat /proc/pci |grep VGA |awk '{print $4}'`
   #GCARD=`cat /proc/pci |grep VGA |sed 's/VGA.*\://' |sed 's/.....//'|sed 's/\.$//'|tr '\n' ','|sed 's/,$//'`
   #GCARD=`/usr/bin/lspci | grep "VGA compatible controller:" | sort -r | awk -F": " ' BEGIN { graphics="" } { if (graphics != "") graphics=graphics ", "; graphics=graphics $2 } END {gsub(":",".",graphics); print graphics}'`

if [ "$GCARD" == " " ]; then
   GRAPHICS="UNKNOWN"
   GCARD="UNKNOWN" 
fi

#
# Set FLAGS
#
FLAGS=0
TxtFLAGS=""
			# Not Available - EEPROM password is set
if [ -f /var/.donotask ]; then		# Reboot query disabled
  FLAGS=`expr $FLAGS + 2`
  TxtFLAGS="$TxtFLAGS DoNotAsk"
fi
ADIR=/var/sadm/system/autoupdate
if [ -f $ADIR/nopatches ]; then		# Auto patching disabled
  FLAGS=`expr $FLAGS + 8`
  TxtFLAGS="$TxtFLAGS NoPatches"
fi
if [ -f $ADIR/noretrofit ]; then	# Auto retrofit disabled
  FLAGS=`expr $FLAGS + 16`
  TxtFLAGS="$TxtFLAGS NoRetrofit"
fi
if [ -f $ADIR/nopassword ]; then	# Auto password change disabled
  FLAGS=`expr $FLAGS + 32`
  TxtFLAGS="$TxtFLAGS NoPassword"
fi
if [ -f $ADIR/killb4patches ]; then	# killb4patch script exists
  FLAGS=`expr $FLAGS + 64`
  TxtFLAGS="$TxtFLAGS KillB4Patches"
fi
if [ -f $ADIR/.Notified ]; then		# Notified about upcoming patching
  FLAGS=`expr $FLAGS + 128`
  TxtFLAGS="$TxtFLAGS Notified"
fi
which zdump >/dev/null
if [ "$?" = "0" ]; then
  FlagTest=`zdump -v US/Eastern | grep " 2010 "|egrep -c 'Mar|Nov'`
else
  FlagTest=0
fi
if [ $FlagTest -ge 4 ]; then		# 2010 DST change has been made
  FLAGS=`expr $FLAGS + 256`
  TxtFLAGS="$TxtFLAGS DST-OK"
fi
NetDevs=`ifconfig -a | awk 'begin{DEV=""}{if (DEV == "") DEV=$1 ; if ($1 == "UP") print DEV ; if ($1 == "") DEV=""}'`
DHCP=0
for NETDEV in $NetDevs
do
  if [ -f /etc/sysconfig/network-scripts/ifcfg-$NETDEV ]; then
    if [ `grep -ic BOOTPROTO=dhcp /etc/sysconfig/network-scripts/ifcfg-$NETDEV` -gt 0 ]; then
      DHCP=1
    fi
  fi
done
if [ $DHCP -gt 0 ]; then
  FLAGS=`expr $FLAGS + 512`		# DHCP enabled
  TxtFLAGS="$TxtFLAGS DHCP"
fi

# Monitor info section
MONPN="NA"
MONMOD="NA"
MONSN="NA"
CURRES="NA"


if [ $# -eq 0 ]; then
    echo "$HSTNAME:$MODEL:$DOMAIN:$LOCATION:$OS $OSVER:$HSTID:$ASSET:$SERNUM:${MEMORY}MB($SIMMS):${SWAP}MB:$GCARD:${SPEED}:$CPUTYPE:$DEVS:$JUMPDATE:$LASTLOG:$MONMOD:$MONSN:$CURRES:TBD:TBD:TBD:$FLAGS:$UPTIME"
else
    echo
    echo "$HSTNAME: $MODEL"
    echo "  CPU(s):          ${SPEED} - $CPUTYPE"
    echo "  Memory:          ${MEMORY}MB"
    echo "  Swap:            ${SWAP}MB"
    if [ -n "$GCARD" -a "$GCARD" != "NA" ]; then
        echo "  Graphics:        $GCARD ($GRAPHICS)"
    fi
    echo "  Storage Devices: $DEVS"
    echo "  OS Version:      $OSVER (Installed on $JUMPDATE)"
    echo "  Domain:          $DOMAIN"
    echo "  Host ID:         $HSTID"
    echo "  Location:        $LOCATION"
    echo "  System:          $ASSET"
    echo "  Service:         $SERNUM"
    echo "  Uptime:          $UPTIME days"
    echo "  Primary User:    $LASTLOG"
    #echo "  Monitor:         $MONMOD ($MONPN) SN:$MONSN"
    #echo "  Resolution:      $CURRES"
    if [ "$TxtFLAGS" = "" ]; then
      TxtFLAGS=" None"
    fi
    echo "  Flags:	  $TxtFLAGS"
fi

[ -z $1 ] && exit
echo

## Added some code from: Doug Crompton, WA3DSP:
#
for info in /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_*
do
  result=`cat ${info}`
  if [[ ${info} == *"cpuinfo_transition_latency"* ]]; then
    result=`expr $result`
    echo "  "$(basename "${info}")": $result"
   else
    result=`expr $result / 1000`
    echo "  "$(basename "${info}")": $result MHz"
  fi
done
if [ -s /sys/devices/system/cpu/cpufreq/ondemand/up_threshold ]; then
     THRES=`cat /sys/devices/system/cpu/cpufreq/ondemand/up_threshold`
fi
[ -n "$THRES" ] && echo "  CPU ondemand up threshold: $THRES"
SCGOV=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
echo "  CPU scaling governor: $SCGOV"
PTEMP=`cat /sys/class/thermal/thermal_zone0/temp`
PTEMP=`expr $PTEMP / 1000`
FTEMP=`expr 9 '*' $PTEMP / 5 + 32`
if [ $PTEMP -lt 50 ]; then
   CTEMP="GREEN ;)"
 elif [ $PTEMP -lt 60 ]; then
   CTEMP="YELLOW :|"
 else 
   CTEMP="RED :("
fi
echo
echo "  Current CPU Temperature: ${FTEMP} F, ${PTEMP} C / $CTEMP"
echo
echo "  "Core `/opt/vc/bin/vcgencmd measure_volts core`
echo "  "sdram core `/opt/vc/bin/vcgencmd measure_volts sdram_c`
echo "  "sdram I/O `/opt/vc/bin/vcgencmd measure_volts sdram_i`
echo "  "sdram PHY `/opt/vc/bin/vcgencmd measure_volts sdram_p`
echo "  "`grep -m 1 Bogo /proc/cpuinfo` X 4 CORES
echo

